{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "71b6706b",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-01-29T09:53:54.012424Z",
     "iopub.status.busy": "2025-01-29T09:53:54.012083Z",
     "iopub.status.idle": "2025-01-29T09:53:54.743862Z",
     "shell.execute_reply": "2025-01-29T09:53:54.742893Z"
    },
    "papermill": {
     "duration": 0.741561,
     "end_time": "2025-01-29T09:53:54.745435",
     "exception": false,
     "start_time": "2025-01-29T09:53:54.003874",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/arxiv-ml-csv/arxiv_ml.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bb77a288",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:53:54.757700Z",
     "iopub.status.busy": "2025-01-29T09:53:54.757346Z",
     "iopub.status.idle": "2025-01-29T09:53:56.729905Z",
     "shell.execute_reply": "2025-01-29T09:53:56.729206Z"
    },
    "papermill": {
     "duration": 1.980139,
     "end_time": "2025-01-29T09:53:56.731503",
     "exception": false,
     "start_time": "2025-01-29T09:53:54.751364",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Mencoba memuat data dengan encoding utf-8\n",
    "file_path = '/kaggle/input/arxiv-ml-csv/arxiv_ml.csv'\n",
    "df = pd.read_csv(file_path, encoding='utf-8')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "daecbbf6",
   "metadata": {
    "papermill": {
     "duration": 0.005421,
     "end_time": "2025-01-29T09:53:56.742907",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.737486",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ded547a7",
   "metadata": {
    "papermill": {
     "duration": 0.005009,
     "end_time": "2025-01-29T09:53:56.753572",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.748563",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Menampilkan head dan informasi dasar dari dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "276c7a52",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:53:56.764690Z",
     "iopub.status.busy": "2025-01-29T09:53:56.764411Z",
     "iopub.status.idle": "2025-01-29T09:53:56.783408Z",
     "shell.execute_reply": "2025-01-29T09:53:56.782604Z"
    },
    "papermill": {
     "duration": 0.026008,
     "end_time": "2025-01-29T09:53:56.784675",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.758667",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "      <th>abstract</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>58805</td>\n",
       "      <td>Advances in Asynchronous Parallel and Distribu...</td>\n",
       "      <td>Motivated by large-scale optimization proble...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58806</td>\n",
       "      <td>Turbocharging Treewidth-Bounded Bayesian Netwo...</td>\n",
       "      <td>We present a new approach for learning the s...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>58807</td>\n",
       "      <td>Crop Yield Prediction Integrating Genotype and...</td>\n",
       "      <td>Accurate prediction of crop yield supported ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>58808</td>\n",
       "      <td>Time Series Analysis and Forecasting of COVID-...</td>\n",
       "      <td>Coronavirus disease 2019 (COVID-19) is a glo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>58809</td>\n",
       "      <td>Movement Tracking by Optical Flow Assisted Ine...</td>\n",
       "      <td>Robust and accurate six degree-of-freedom tr...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id                                              title  \\\n",
       "0  58805  Advances in Asynchronous Parallel and Distribu...   \n",
       "1  58806  Turbocharging Treewidth-Bounded Bayesian Netwo...   \n",
       "2  58807  Crop Yield Prediction Integrating Genotype and...   \n",
       "3  58808  Time Series Analysis and Forecasting of COVID-...   \n",
       "4  58809  Movement Tracking by Optical Flow Assisted Ine...   \n",
       "\n",
       "                                            abstract  \n",
       "0    Motivated by large-scale optimization proble...  \n",
       "1    We present a new approach for learning the s...  \n",
       "2    Accurate prediction of crop yield supported ...  \n",
       "3    Coronavirus disease 2019 (COVID-19) is a glo...  \n",
       "4    Robust and accurate six degree-of-freedom tr...  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "head_df = df.head()\n",
    "head_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "3d0e1752",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:53:56.796338Z",
     "iopub.status.busy": "2025-01-29T09:53:56.796083Z",
     "iopub.status.idle": "2025-01-29T09:53:56.825214Z",
     "shell.execute_reply": "2025-01-29T09:53:56.824394Z"
    },
    "papermill": {
     "duration": 0.036235,
     "end_time": "2025-01-29T09:53:56.826526",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.790291",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 58775 entries, 0 to 58774\n",
      "Data columns (total 3 columns):\n",
      " #   Column    Non-Null Count  Dtype \n",
      "---  ------    --------------  ----- \n",
      " 0   id        58775 non-null  int64 \n",
      " 1   title     58775 non-null  object\n",
      " 2   abstract  58775 non-null  object\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 1.3+ MB\n"
     ]
    }
   ],
   "source": [
    "info_df = df.info()\n",
    "info_df"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ae7381c",
   "metadata": {
    "papermill": {
     "duration": 0.005432,
     "end_time": "2025-01-29T09:53:56.837687",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.832255",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Data telah berhasil dimuat dari file arxiv_ml.csv. Dataset ini terdiri dari 58,775 artikel dengan tiga kolom: id, title, dan abstract. Semua kolom memiliki nilai yang tidak hilang, dan tipe data untuk id adalah integer, sedangkan title dan abstract adalah objek (string).\n",
    "\n",
    "Selanjutnya, saya akan melakukan analisis statistik deskriptif untuk memahami distribusi data, termasuk panjang judul dan abstrak. Mari kita lakukan analisis ini."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "83a2c142",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:53:56.849409Z",
     "iopub.status.busy": "2025-01-29T09:53:56.849168Z",
     "iopub.status.idle": "2025-01-29T09:53:56.906931Z",
     "shell.execute_reply": "2025-01-29T09:53:56.906035Z"
    },
    "papermill": {
     "duration": 0.064882,
     "end_time": "2025-01-29T09:53:56.908103",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.843221",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title_length</th>\n",
       "      <th>abstract_length</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>58775.000000</td>\n",
       "      <td>58775.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>75.894428</td>\n",
       "      <td>1199.685972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>24.682852</td>\n",
       "      <td>334.743697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>8.000000</td>\n",
       "      <td>83.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>58.000000</td>\n",
       "      <td>965.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>75.000000</td>\n",
       "      <td>1189.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>91.000000</td>\n",
       "      <td>1427.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>243.000000</td>\n",
       "      <td>3312.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       title_length  abstract_length\n",
       "count  58775.000000     58775.000000\n",
       "mean      75.894428      1199.685972\n",
       "std       24.682852       334.743697\n",
       "min        8.000000        83.000000\n",
       "25%       58.000000       965.000000\n",
       "50%       75.000000      1189.000000\n",
       "75%       91.000000      1427.000000\n",
       "max      243.000000      3312.000000"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Menghitung statistik deskriptif dan panjang judul serta abstrak\n",
    "df['title_length'] = df['title'].apply(len)\n",
    "df['abstract_length'] = df['abstract'].apply(len)\n",
    "\n",
    "# Menghitung statistik deskriptif\n",
    "stats = df[['title_length', 'abstract_length']].describe()\n",
    "\n",
    "stats"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3edb5a35",
   "metadata": {
    "papermill": {
     "duration": 0.005555,
     "end_time": "2025-01-29T09:53:56.919504",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.913949",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Statistik deskriptif untuk panjang judul dan abstrak telah dihitung. Hasilnya menunjukkan bahwa:\n",
    "\n",
    "Panjang rata-rata judul adalah sekitar 76 karakter, dengan panjang maksimum 243 karakter.\n",
    "Panjang rata-rata abstrak adalah sekitar 1200 karakter, dengan panjang maksimum 3312 karakter.\n",
    "Ini memberikan gambaran tentang seberapa panjang teks yang ada dalam dataset. Selanjutnya, saya akan memeriksa apakah ada nilai yang hilang dalam dataset dan melakukan analisis distribusi panjang judul dan abstrak. Mari kita lakukan itu."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "f102df25",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:53:56.931481Z",
     "iopub.status.busy": "2025-01-29T09:53:56.931249Z",
     "iopub.status.idle": "2025-01-29T09:53:56.945953Z",
     "shell.execute_reply": "2025-01-29T09:53:56.945230Z"
    },
    "papermill": {
     "duration": 0.022204,
     "end_time": "2025-01-29T09:53:56.947363",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.925159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id                 0\n",
       "title              0\n",
       "abstract           0\n",
       "title_length       0\n",
       "abstract_length    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Memeriksa nilai yang hilang dalam dataset\n",
    "missing_values = df.isnull().sum()\n",
    "missing_values"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d3e05f2",
   "metadata": {
    "papermill": {
     "duration": 0.006958,
     "end_time": "2025-01-29T09:53:56.961752",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.954794",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Tidak ada nilai yang hilang dalam dataset, yang menunjukkan bahwa semua kolom memiliki data lengkap. Saya juga telah menghitung distribusi panjang judul dan abstrak, yang divisualisasikan dalam histogram.\n",
    "\n",
    "Berikut adalah hasil distribusi panjang judul dan abstrak:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "5b9d1af4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:53:56.973703Z",
     "iopub.status.busy": "2025-01-29T09:53:56.973502Z",
     "iopub.status.idle": "2025-01-29T09:53:57.529733Z",
     "shell.execute_reply": "2025-01-29T09:53:57.528879Z"
    },
    "papermill": {
     "duration": 0.563805,
     "end_time": "2025-01-29T09:53:57.531240",
     "exception": false,
     "start_time": "2025-01-29T09:53:56.967435",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[<Axes: title={'center': 'title_length'}>,\n",
       "        <Axes: title={'center': 'abstract_length'}>]], dtype=object)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA+IAAAIQCAYAAAAFN9TtAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAABrnElEQVR4nO3dfVxUdf7//ycgDKAOeAXoikbZqqRm4qbzqcwUIaPdSr5tlmuUlh9d7LPCrpq7ZqDrarZGVqhbmbSf1S1tqy0xBTU1E69YKS+KrjR2S3A3w8nUYYTz+6Mf5+MIIiCc4eJxv924wbzfrznzfr1njue8PGfO8TEMwxAAAAAAALCEr7cHAAAAAABAa0IhDgAAAACAhSjEAQAAAACwEIU4AAAAAAAWohAHAAAAAMBCFOIAAAAAAFiIQhwAAAAAAAtRiAMAAAAAYCEKcQAAAAAALEQhDljgiiuu0AMPPFCr2OHDh2v48OGNMo60tDT5+Pg0yrIb0tatW+Xj46PXXnvN20MBAKBesrKy5OPjo3379nl7KF7H/gdQFYU40IB27typtLQ0lZaW1hh3+PBhpaWl6ejRo5aMq6lavXq1nn76aW8PAwCAJu306dNKS0vT1q1bvTaG2u7jNAfsf6ApoBAHGtDOnTuVnp5eZSNVWFioF154wXx8+PBhpaenU4izIQQA4JJOnz6t9PR0rxfi1e3jNEfsf6ApoBAHLGCz2eTv7+/tYQAAgFbg+++/9/YQAFwChTjQQNLS0jR9+nRJUlRUlHx8fOTj46OjR496fEc8KytLd999tyTplltuMeNq+l9ul8ulxx9/XL169ZLNZlNkZKRmzJghl8vVIGP/y1/+opiYGAUFBaljx44aO3as/vnPf3rEDB8+XP369dPhw4d1yy23KDg4WD/60Y+0aNGiKsv78ssv9bOf/Uxt27ZVWFiYUlJStHHjRo88hw8fruzsbH355ZfmHFxxxRUey6moqND8+fPVvXt3BQYGauTIkfrss88aJGcAAOrjyy+/1C9/+Uv17t1bQUFB6tSpk+6+++6LnuV2+vRp/fd//7c6deoku92u+++/X99++61HzL59+xQfH6/OnTsrKChIUVFRmjBhgiTp6NGj6tKliyQpPT3d3GampaVJkh544AG1a9dOn3/+uW677Ta1b99e48aNkyS99957uvvuu9WjRw9z/yElJUVnzpypMs6PP/5YP//5z9WlSxcFBQWpd+/e+t3vfiep5n2cy8H+B1qzNt4eANBSjBkzRp988on++te/KiMjQ507d5Ykc+NZadiwYfqf//kfPfPMM/rtb3+rvn37SpL5+0IVFRX62c9+ph07dmjSpEnq27evDhw4oIyMDH3yySd68803L2vc8+fP12OPPaaf//zneuihh/Tvf/9bzz77rIYNG6b9+/crNDTUjP3222916623asyYMfr5z3+u1157TTNnzlT//v01evRoST/8L/yIESN07Ngx/epXv1JERIRWr16td9991+N1f/e73+nkyZP617/+pYyMDElSu3btPGIWLlwoX19f/eY3v9HJkye1aNEijRs3Trt3776snAEAqK+9e/dq586dGjt2rLp3766jR49q2bJlGj58uA4fPqzg4GCP+KlTpyo0NFRpaWkqLCzUsmXL9OWXX5oXBjt+/Lji4uLUpUsXPfroowoNDdXRo0f1+uuvS/phP2LZsmWaMmWK7rrrLo0ZM0aSNGDAAPM1zp07p/j4eN1444364x//aI5h7dq1On36tKZMmaJOnTppz549evbZZ/Wvf/1La9euNZ//4Ycf6qabbpK/v78mTZqkK664Qp9//rnefvttzZ8/v9b7OHXB/gdaPQNAg3nyyScNScaRI0c82nv27GkkJSWZj9euXWtIMt59990qy7j55puNm2++2Xz8v//7v4avr6/x3nvvecQtX77ckGS8//77tR7f448/bpy/2h89etTw8/Mz5s+f7xF34MABo02bNh7tN998syHJ+POf/2y2uVwuIyIiwkhMTDTbFi9ebEgy3nzzTbPtzJkzRp8+farknJCQYPTs2bPKON99911DktG3b1/D5XKZ7UuWLDEkGQcOHKh1zgAANKTTp09XacvLy6uyjVy5cqUhyYiJiTHKysrM9kWLFhmSjL///e+GYRjGG2+8YUgy9u7de9HX/Pe//21IMh5//PEqfUlJSYYk49FHH63VWBcsWGD4+PgYX375pdk2bNgwo3379h5thmEYFRUV5t8X28epDfY/gKo4NR1o4tauXau+ffuqT58++s9//mP+jBgxQpKq/E9vXbz++uuqqKjQz3/+c49lR0RE6Oqrr66y7Hbt2ukXv/iF+TggIEDXX3+9vvjiC7Ntw4YN+tGPfqSf/exnZltgYKAefvjhOo/vwQcfVEBAgPn4pptukiSP1wMAwEpBQUHm3263W99884169eql0NBQ/eMf/6gSP2nSJI/rxEyZMkVt2rTR+vXrJck88rtu3Tq53e56j2vKlCk1jvX777/Xf/7zH/3Xf/2XDMPQ/v37JUn//ve/tX37dk2YMEE9evTweH5j3XKM/Q+AU9OBJu/TTz/VRx99dNHTv44fP35ZyzYMQ1dffXW1/RdeYK579+5VNsodOnTQhx9+aD7+8ssvddVVV1WJ69WrV53Hd+EOQYcOHSSpynfrAACwypkzZ7RgwQKtXLlSX331lQzDMPtOnjxZJf7CbWy7du3UtWtX8/vVN998sxITE5Wenq6MjAwNHz5cd955p+677z7ZbLZajalNmzbq3r17lfaioiLNmTNHb731VpVtZ+VYK4vLfv361eq1GgL7HwCFONDkVVRUqH///nrqqaeq7Y+MjLysZfv4+Oidd96Rn59flf4LvzNVXYwkj52QhmT16wEAcCmPPPKIVq5cqWnTpsnhcCgkJEQ+Pj4aO3asKioq6rw8Hx8fvfbaa9q1a5fefvttbdy4URMmTNDixYu1a9euKtvi6thsNvn6ep7oWl5erlGjRunEiROaOXOm+vTpo7Zt2+qrr77SAw88UK+xNhT2PwAKcaBB1fYUrrqc6nXVVVfpgw8+0MiRIxv8FLGrrrpKhmEoKipKP/7xjxtkmT179tThw4dlGIbHeKu72mhjnfIGAEBjee2115SUlKTFixebbWfPnr3o/bU//fRT3XLLLebjU6dO6dixY7rttts84oYOHaqhQ4dq/vz5Wr16tcaNG6dXXnlFDz30UL22lwcOHNAnn3yil19+Wffff7/Znpub6xF35ZVXSpIOHjxY4/IacpvN/gfA7cuABtW2bVtJuujGuK5xkvTzn/9cX331lV544YUqfWfOnLmse4WOGTNGfn5+Sk9Pr/K/vIZh6JtvvqnzMuPj4/XVV1/prbfeMtvOnj1b7fjbtm1b7Wl8AAA0VX5+flW2mc8++6zKy8urjX/++ec9vvu9bNkynTt3zrza97fffltleQMHDpQk8zallVdBr81+w/njlDyP4hqGoSVLlnjEdenSRcOGDdNLL72koqIij77zn1uXfZdLYf8D4Ig40KBiYmIk/XBrjLFjx8rf318//elPq8QNHDhQfn5+euKJJ3Ty5EnZbDaNGDFCYWFhVWLHjx+vNWvWaPLkyXr33Xd1ww03qLy8XB9//LHWrFmjjRs3avDgwfUa71VXXaXf//73mjVrlo4ePao777xT7du315EjR/TGG29o0qRJ+s1vflOnZf73f/+3nnvuOd1777361a9+pa5du2rVqlUKDAyU5Pm/0DExMXr11VeVmpqqn/zkJ2rXrl218wUAQFNx++2363//938VEhKi6Oho5eXladOmTerUqVO18WVlZRo5cqR+/vOfq7CwUEuXLtWNN95oXlTs5Zdf1tKlS3XXXXfpqquu0nfffacXXnhBdrvdPGoeFBSk6Ohovfrqq/rxj3+sjh07ql+/fjV+r7tPnz666qqr9Jvf/EZfffWV7Ha7/va3v1X7PednnnlGN954owYNGqRJkyYpKipKR48eVXZ2tgoKCiRdfB+nskCvC/Y/AHH7MqChzZs3z/jRj35k+Pr6mrf5uPD2ZYZhGC+88IJx5ZVXGn5+fh631bjw9mWGYRhlZWXGE088YVxzzTWGzWYzOnToYMTExBjp6enGyZMnaz22C28fUulvf/ubceONNxpt27Y12rZta/Tp08dITk42CgsLzZibb77ZuOaaa6o8NykpqcotQL744gsjISHBCAoKMrp06WL8+te/Nv72t78Zkoxdu3aZcadOnTLuu+8+IzQ01JBkLqfy9iFr1671WO6RI0cMScbKlStrnTMAAA3p22+/NR588EGjc+fORrt27Yz4+Hjj448/rrKtr7x92bZt24xJkyYZHTp0MNq1a2eMGzfO+Oabb8y4f/zjH8a9995r9OjRw7DZbEZYWJhx++23G/v27fN43Z07dxoxMTFGQECAx63MkpKSjLZt21Y71sOHDxuxsbFGu3btjM6dOxsPP/yw8cEHH1S7LT148KBx1113GaGhoUZgYKDRu3dv47HHHvOIqW4fpzbY/wCq8jEMrjoAoPE9/fTTSklJ0b/+9S/96Ec/8vZwAABAK8D+B5oqCnEADe7MmTMe9y49e/asrrvuOpWXl+uTTz7x4sgAAEBLxf4HmhO+Iw60ACdPntSZM2dqjImIiLBoND9chKVHjx4aOHCgTp48qb/85S/6+OOPtWrVKsvGAAAAGhf7H0D9cUQcaAEeeOABvfzyyzXGWLmqP/3003rxxRd19OhRlZeXKzo6WjNmzNA999xj2RgAAEDjYv8DqD8K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d+7cWX5+fiopKfFoLykpUURERLXPsdlsstlsHm2hoaEXfQ273d6i3nCrMG/1w7zVD/NWf8xd/Vxs3jgS3rTVdb+hrvsM52sN6xY5tgzk2DKQY/NUm/2GJnmxtoCAAMXExGjz5v/7jlVFRYU2b94sh8PhxZEBAICmhv0GAEBz0ySPiEtSamqqkpKSNHjwYF1//fV6+umn9f333+vBBx/09tAAAEATw34DAKA5abKF+D333KN///vfmjNnjoqLizVw4EBt2LChyoVY6spms+nxxx+vckoaasa81Q/zVj/MW/0xd/XDvDV/jbXfUKk1fEbIsWUgx5aBHFs+H4P7sQAAAAAAYJkm+R1xAAAAAABaKgpxAAAAAAAsRCEOAAAAAICFKMQBAAAAALBQqyrEMzMzdcUVVygwMFBDhgzRnj17vD2kJiUtLU0+Pj4eP3369DH7z549q+TkZHXq1Ent2rVTYmKiSkpKvDhi79m+fbt++tOfqlu3bvLx8dGbb77p0W8YhubMmaOuXbsqKChIsbGx+vTTTz1iTpw4oXHjxslutys0NFQTJ07UqVOnLMzCepeatwceeKDKZ/DWW2/1iGlt87ZgwQL95Cc/Ufv27RUWFqY777xThYWFHjG1WTeLioqUkJCg4OBghYWFafr06Tp37pyVqViuNnM3fPjwKp+5yZMne8S0xrlDVc11H6Ihtu1NbR2wahv84Ycf6qabblJgYKAiIyO1aNGixk7NZNX20ps5Wrl927p1qwYNGiSbzaZevXopKyursdOTZO12yFs5Llu2TAMGDJDdbpfdbpfD4dA777xj9jf397BRGa3EK6+8YgQEBBgvvfSScejQIePhhx82QkNDjZKSEm8Prcl4/PHHjWuuucY4duyY+fPvf//b7J88ebIRGRlpbN682di3b58xdOhQ47/+67+8OGLvWb9+vfG73/3OeP311w1JxhtvvOHRv3DhQiMkJMR48803jQ8++MD42c9+ZkRFRRlnzpwxY2699Vbj2muvNXbt2mW89957Rq9evYx7773X4kysdal5S0pKMm699VaPz+CJEyc8YlrbvMXHxxsrV640Dh48aBQUFBi33Xab0aNHD+PUqVNmzKXWzXPnzhn9+vUzYmNjjf379xvr1683OnfubMyaNcsbKVmmNnN38803Gw8//LDHZ+7kyZNmf2udO3hqzvsQl7ttb4rrgBXb4JMnTxrh4eHGuHHjjIMHDxp//etfjaCgIONPf/pTk8ixIbaX3s7Rqu3bF198YQQHBxupqanG4cOHjWeffdbw8/MzNmzY0CRybIjtkDdzfOutt4zs7Gzjk08+MQoLC43f/va3hr+/v3Hw4EHDMJr/e9iYWk0hfv311xvJycnm4/LycqNbt27GggULvDiqpuXxxx83rr322mr7SktLDX9/f2Pt2rVm20cffWRIMvLy8iwaYdN04QayoqLCiIiIMJ588kmzrbS01LDZbMZf//pXwzAM4/Dhw4YkY+/evWbMO++8Y/j4+BhfffWVZWP3povtWNxxxx0XfQ7zZhjHjx83JBnbtm0zDKN26+b69esNX19fo7i42IxZtmyZYbfbDZfLZW0CXnTh3BnGDztAv/rVry76HOYOhtG89yEud9ve1NeBxtoGL1261OjQoYNHjjNnzjR69+7dyBlV1Vjby6aUo2E03vZtxowZxjXXXOPxWvfcc48RHx/f2ClV0VjboaaUo2EYRocOHYwXX3yxRb6HDalVnJpeVlam/Px8xcbGmm2+vr6KjY1VXl6eF0fW9Hz66afq1q2brrzySo0bN05FRUWSpPz8fLndbo857NOnj3r06MEcXuDIkSMqLi72mKuQkBANGTLEnKu8vDyFhoZq8ODBZkxsbKx8fX21e/duy8fclGzdulVhYWHq3bu3pkyZom+++cbsY96kkydPSpI6duwoqXbrZl5envr376/w8HAzJj4+Xk6nU4cOHbJw9N514dxVWrVqlTp37qx+/fpp1qxZOn36tNnH3KEl7ENczra9ua0DDbUNzsvL07BhwxQQEGDGxMfHq7CwUN9++61F2dTscreXTS3Hxtq+5eXleSyjMsYb629jbYeaSo7l5eV65ZVX9P3338vhcLTI97AhtfH2AKzwn//8R+Xl5R5vsCSFh4fr448/9tKomp4hQ4YoKytLvXv31rFjx5Senq6bbrpJBw8eVHFxsQICAhQaGurxnPDwcBUXF3tnwE1U5XxU93mr7CsuLlZYWJhHf5s2bdSxY8dWPZ+33nqrxowZo6ioKH3++ef67W9/q9GjRysvL09+fn6tft4qKio0bdo03XDDDerXr58k1WrdLC4urvbzWNnXGlQ3d5J03333qWfPnurWrZs+/PBDzZw5U4WFhXr99dclMXdo/vsQl7tt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\n",
      "text/plain": [
       "<Figure size 1200x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Menghitung distribusi panjang judul dan abstrak\n",
    "length_distribution = df[['title_length', 'abstract_length']].hist(bins=30, figsize=(12, 6))\n",
    "length_distribution"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "acdc3587",
   "metadata": {
    "papermill": {
     "duration": 0.006117,
     "end_time": "2025-01-29T09:53:57.544218",
     "exception": false,
     "start_time": "2025-01-29T09:53:57.538101",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Histogram ini memberikan gambaran tentang sebaran panjang judul dan abstrak dalam dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "6f987bdf",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:53:57.557529Z",
     "iopub.status.busy": "2025-01-29T09:53:57.557238Z",
     "iopub.status.idle": "2025-01-29T09:54:02.329358Z",
     "shell.execute_reply": "2025-01-29T09:54:02.328556Z"
    },
    "papermill": {
     "duration": 4.780349,
     "end_time": "2025-01-29T09:54:02.330748",
     "exception": false,
     "start_time": "2025-01-29T09:53:57.550399",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "([('for', 22743),\n",
       "  ('learning', 19227),\n",
       "  ('of', 14249),\n",
       "  ('and', 12767),\n",
       "  ('a', 10224),\n",
       "  ('in', 10143),\n",
       "  ('with', 9710),\n",
       "  ('neural', 7123),\n",
       "  ('the', 6854),\n",
       "  ('deep', 6303)],\n",
       " [('the', 570854),\n",
       "  ('of', 343193),\n",
       "  ('and', 278676),\n",
       "  ('to', 271589),\n",
       "  ('a', 246707),\n",
       "  ('in', 204919),\n",
       "  ('we', 160734),\n",
       "  ('for', 123397),\n",
       "  ('is', 117487),\n",
       "  ('that', 114969)])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from collections import Counter\n",
    "import re\n",
    "\n",
    "# Menggabungkan semua judul dan abstrak menjadi satu teks\n",
    "all_titles = ' '.join(df['title'].tolist())\n",
    "all_abstracts = ' '.join(df['abstract'].tolist())\n",
    "\n",
    "# Fungsi untuk membersihkan dan menghitung frekuensi kata\n",
    "def count_words(text):\n",
    "    # Menghapus karakter non-alphabet dan mengubah ke huruf kecil\n",
    "    words = re.findall(r'\\w+', text.lower())  # Perbaikan di sini\n",
    "    return Counter(words)\n",
    "\n",
    "# Menghitung frekuensi kata untuk judul dan abstrak\n",
    "title_word_counts = count_words(all_titles)\n",
    "abstract_word_counts = count_words(all_abstracts)\n",
    "\n",
    "# Mengambil 10 kata paling umum dari judul dan abstrak\n",
    "common_title_words = title_word_counts.most_common(10)\n",
    "common_abstract_words = abstract_word_counts.most_common(10)\n",
    "\n",
    "common_title_words, common_abstract_words"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c12bd5ff",
   "metadata": {
    "papermill": {
     "duration": 0.007141,
     "end_time": "2025-01-29T09:54:02.345676",
     "exception": false,
     "start_time": "2025-01-29T09:54:02.338535",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Saya telah menghitung frekuensi kata dalam judul dan abstrak. Berikut adalah 10 kata yang paling umum muncul dalam judul dan abstrak:\n",
    "\n",
    "Kata Paling Umum dalam Judul:\n",
    "[('for'\n",
    "\n",
    "Kata Paling Umum dalam Abstrak:\n",
    "\n",
    "[('the'\n",
    "\n",
    "Dari analisis ini, kita dapat melihat bahwa kata-kata seperti \"for\", \"learning\", \"of\", dan \"and\" sering muncul dalam judul, menunjukkan fokus pada pembelajaran dan aplikasi. Sementara itu, dalam abstrak, kata-kata seperti \"the\", \"of\", \"and\", dan \"to\" mendominasi, yang merupakan kata umum dalam bahasa Inggris."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d450967",
   "metadata": {
    "papermill": {
     "duration": 0.006159,
     "end_time": "2025-01-29T09:54:02.358086",
     "exception": false,
     "start_time": "2025-01-29T09:54:02.351927",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Saya telah mengelompokkan artikel dalam dataset berdasarkan kata kunci menggunakan teknik KMeans. Hasilnya menunjukkan jumlah artikel dalam setiap cluster. Berikut adalah jumlah artikel yang terdistribusi di setiap cluster:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "b38f3f83",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:54:02.371459Z",
     "iopub.status.busy": "2025-01-29T09:54:02.371164Z",
     "iopub.status.idle": "2025-01-29T09:54:32.434184Z",
     "shell.execute_reply": "2025-01-29T09:54:32.433487Z"
    },
    "papermill": {
     "duration": 30.077071,
     "end_time": "2025-01-29T09:54:32.441372",
     "exception": false,
     "start_time": "2025-01-29T09:54:02.364301",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   cluster  count\n",
      "0        4  42615\n",
      "1        0   9192\n",
      "2        1   3059\n",
      "3        3   2082\n",
      "4        2   1827\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "# Menggabungkan judul dan abstrak untuk mendapatkan teks lengkap\n",
    "combined_text = df['title'] + ' ' + df['abstract']\n",
    "\n",
    "# Menggunakan TF-IDF untuk mengubah teks menjadi representasi numerik\n",
    "vectorizer = TfidfVectorizer(stop_words='english')\n",
    "X = vectorizer.fit_transform(combined_text)\n",
    "\n",
    "# Menggunakan KMeans untuk mengelompokkan artikel\n",
    "num_clusters = 5  # Jumlah cluster yang diinginkan\n",
    "kmeans = KMeans(n_clusters=num_clusters, random_state=42, n_init=10)  # Menetapkan n_init secara eksplisit\n",
    "kmeans.fit(X)\n",
    "\n",
    "# Menambahkan label cluster ke dataframe\n",
    "df['cluster'] = kmeans.labels_\n",
    "\n",
    "# Menghitung jumlah artikel dalam setiap cluster\n",
    "cluster_counts = df['cluster'].value_counts().reset_index()\n",
    "cluster_counts.columns = ['cluster', 'count']\n",
    "\n",
    "# Menampilkan hasil\n",
    "print(cluster_counts)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f5ac0bd",
   "metadata": {
    "papermill": {
     "duration": 0.006418,
     "end_time": "2025-01-29T09:54:32.454439",
     "exception": false,
     "start_time": "2025-01-29T09:54:32.448021",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Dari hasil ini, kita dapat melihat bahwa cluster 4 memiliki jumlah artikel terbanyak, diikuti oleh cluster 0. Cluster lainnya memiliki jumlah yang lebih sedikit. Ini menunjukkan bahwa ada beberapa tema dominan dalam dataset ini.\n",
    "\n",
    "Selanjutnya, saya akan menganalisis lebih lanjut untuk memahami tema yang ada dalam setiap cluster dengan melihat contoh judul dan abstrak dari setiap cluster. Mari kita ambil beberapa contoh dari setiap cluster untuk analisis lebih lanjut."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "0fe533ae",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:54:32.468529Z",
     "iopub.status.busy": "2025-01-29T09:54:32.468098Z",
     "iopub.status.idle": "2025-01-29T09:54:32.497818Z",
     "shell.execute_reply": "2025-01-29T09:54:32.496915Z"
    },
    "papermill": {
     "duration": 0.038259,
     "end_time": "2025-01-29T09:54:32.499242",
     "exception": false,
     "start_time": "2025-01-29T09:54:32.460983",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-10-7c93be0a6081>:2: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n",
      "  cluster_examples = df.groupby('cluster').apply(lambda x: x[['title', 'abstract']].sample(2)).reset_index(drop=True)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>title</th>\n",
       "      <th>abstract</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Heuristic-Guided Reinforcement Learning</td>\n",
       "      <td>We provide a framework for accelerating rein...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Non-Markovian policies occupancy measures</td>\n",
       "      <td>A central object of study in Reinforcement Lea...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>GINA: Neural Relational Inference From Indepen...</td>\n",
       "      <td>Dynamical systems in which local interaction...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Simulating Liquids with Graph Networks</td>\n",
       "      <td>Simulating complex dynamics like fluids with...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>FAWA: Fast Adversarial Watermark Attack on Opt...</td>\n",
       "      <td>Deep neural networks (DNNs) significantly im...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Mitigating Black-Box Adversarial Attacks via O...</td>\n",
       "      <td>In black-box adversarial attacks, adversarie...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>New Directions in Distributed Deep Learning: B...</td>\n",
       "      <td>In this paper, we first highlight three majo...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Achieving Linear Speedup with Partial Worker P...</td>\n",
       "      <td>Federated learning (FL) is a distributed mac...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>PECOS: Prediction for Enormous and Correlated ...</td>\n",
       "      <td>Many large-scale applications amount to find...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>OGGN: A Novel Generalized Oracle Guided Genera...</td>\n",
       "      <td>This paper presents a novel Generative Neura...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                               title  \\\n",
       "0            Heuristic-Guided Reinforcement Learning   \n",
       "1          Non-Markovian policies occupancy measures   \n",
       "2  GINA: Neural Relational Inference From Indepen...   \n",
       "3             Simulating Liquids with Graph Networks   \n",
       "4  FAWA: Fast Adversarial Watermark Attack on Opt...   \n",
       "5  Mitigating Black-Box Adversarial Attacks via O...   \n",
       "6  New Directions in Distributed Deep Learning: B...   \n",
       "7  Achieving Linear Speedup with Partial Worker P...   \n",
       "8  PECOS: Prediction for Enormous and Correlated ...   \n",
       "9  OGGN: A Novel Generalized Oracle Guided Genera...   \n",
       "\n",
       "                                            abstract  \n",
       "0    We provide a framework for accelerating rein...  \n",
       "1  A central object of study in Reinforcement Lea...  \n",
       "2    Dynamical systems in which local interaction...  \n",
       "3    Simulating complex dynamics like fluids with...  \n",
       "4    Deep neural networks (DNNs) significantly im...  \n",
       "5    In black-box adversarial attacks, adversarie...  \n",
       "6    In this paper, we first highlight three majo...  \n",
       "7    Federated learning (FL) is a distributed mac...  \n",
       "8    Many large-scale applications amount to find...  \n",
       "9    This paper presents a novel Generative Neura...  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Mengambil contoh judul dan abstrak dari setiap cluster\n",
    "cluster_examples = df.groupby('cluster').apply(lambda x: x[['title', 'abstract']].sample(2)).reset_index(drop=True)\n",
    "\n",
    "cluster_examples"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f7f63d23",
   "metadata": {
    "papermill": {
     "duration": 0.00669,
     "end_time": "2025-01-29T09:54:32.513250",
     "exception": false,
     "start_time": "2025-01-29T09:54:32.506560",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Dari contoh artikel yang ditampilkan di dataset, kita dapat melihat bahwa setiap cluster memiliki tema yang berbeda. Misalnya, cluster pertama mencakup topik-topik seperti user association, privacy-preserving, dan robust ensembles dalam konteks machine learning, sedangkan cluster lainnya lebih berfokus pada neural networks, model selection, dan adversarial robustness.\n",
    "\n",
    "Sebagai langkah selanjutnya, saya akan melakukan analisis lebih mendalam untuk mengidentifikasi kata kunci atau frasa yang lebih spesifik dalam setiap cluster. Ini akan membantu kita untuk memahami tema yang lebih mendalam dari setiap kelompok artikel dan mengelompokkan artikel-artikel berdasarkan topik-topik utama yang mereka bahas."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9bb0aa78",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:54:32.527983Z",
     "iopub.status.busy": "2025-01-29T09:54:32.527742Z",
     "iopub.status.idle": "2025-01-29T09:54:39.726645Z",
     "shell.execute_reply": "2025-01-29T09:54:39.725782Z"
    },
    "papermill": {
     "duration": 7.207791,
     "end_time": "2025-01-29T09:54:39.728112",
     "exception": false,
     "start_time": "2025-01-29T09:54:32.520321",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{0: ['learning',\n",
       "  'policy',\n",
       "  'algorithm',\n",
       "  'reinforcement',\n",
       "  'rl',\n",
       "  'optimization',\n",
       "  'algorithms',\n",
       "  'model',\n",
       "  'based',\n",
       "  'problem'],\n",
       " 1: ['graph',\n",
       "  'learning',\n",
       "  'neural',\n",
       "  'networks',\n",
       "  'node',\n",
       "  'graphs',\n",
       "  'gnns',\n",
       "  'data',\n",
       "  'network',\n",
       "  'model'],\n",
       " 2: ['adversarial',\n",
       "  'attacks',\n",
       "  'training',\n",
       "  'robustness',\n",
       "  'attack',\n",
       "  'model',\n",
       "  'models',\n",
       "  'learning',\n",
       "  'data',\n",
       "  'examples'],\n",
       " 3: ['learning',\n",
       "  'data',\n",
       "  'federated',\n",
       "  'privacy',\n",
       "  'fl',\n",
       "  'model',\n",
       "  'training',\n",
       "  'clients',\n",
       "  'communication',\n",
       "  'local'],\n",
       " 4: ['data',\n",
       "  'learning',\n",
       "  'model',\n",
       "  'models',\n",
       "  'neural',\n",
       "  'based',\n",
       "  'training',\n",
       "  'deep',\n",
       "  'network',\n",
       "  'networks']}"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Mengambil kata kunci atau frasa yang lebih spesifik dari setiap cluster\n",
    "# Saya akan menggunakan TF-IDF untuk menemukan kata kunci dalam setiap cluster\n",
    "cluster_keywords = {}\n",
    "\n",
    "for cluster in range(num_clusters):\n",
    "    # Mengambil teks dari cluster tertentu\n",
    "    cluster_text = df[df['cluster'] == cluster]['title'] + ' ' + df[df['cluster'] == cluster]['abstract']\n",
    "    # Menggunakan TF-IDF untuk menemukan kata kunci\n",
    "    tfidf_vectorizer = TfidfVectorizer(stop_words='english')\n",
    "    tfidf_matrix = tfidf_vectorizer.fit_transform(cluster_text)\n",
    "    # Mengambil kata kunci berdasarkan skor TF-IDF\n",
    "    feature_array = tfidf_vectorizer.get_feature_names_out()\n",
    "    tfidf_sorting = tfidf_matrix.sum(axis=0).A1.argsort()[::-1]\n",
    "    top_n = feature_array[tfidf_sorting][:10]  # Mengambil 10 kata kunci teratas\n",
    "    cluster_keywords[cluster] = top_n.tolist()\n",
    "\n",
    "cluster_keywords"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8b9824ef",
   "metadata": {
    "papermill": {
     "duration": 0.006643,
     "end_time": "2025-01-29T09:54:39.742299",
     "exception": false,
     "start_time": "2025-01-29T09:54:39.735656",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Dari hasil ini, kita dapat melihat bahwa setiap cluster memiliki fokus yang berbeda:\n",
    "1. Cluster 0: Berfokus pada pembelajaran penguatan (reinforcement learning), algoritma, dan optimasi.\n",
    "2. Cluster 1: Menekankan pada pembelajaran graf, jaringan saraf (neural networks), dan graf berbasis data.\n",
    "3. Cluster 2: Terkait dengan serangan adversarial, ketahanan model (robustness), dan pelatihan adversarial.\n",
    "4. Cluster 3: Menggali topik-topik terkait pembelajaran federated, privasi, dan komunikasi antar klien.\n",
    "5. Cluster 4: Berfokus pada pembelajaran mendalam (deep learning), jaringan saraf, dan model berbasis data.\n",
    "   \n",
    "Dengan informasi ini, kita dapat lebih memahami tema yang ada dalam dataset dan bagaimana artikel-artikel tersebut saling terkait dalam setiap cluster."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f96eec6b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:54:39.756739Z",
     "iopub.status.busy": "2025-01-29T09:54:39.756487Z",
     "iopub.status.idle": "2025-01-29T09:54:51.171580Z",
     "shell.execute_reply": "2025-01-29T09:54:51.170675Z"
    },
    "papermill": {
     "duration": 11.423992,
     "end_time": "2025-01-29T09:54:51.172917",
     "exception": false,
     "start_time": "2025-01-29T09:54:39.748925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>cluster</th>\n",
       "      <th>id</th>\n",
       "      <th>title</th>\n",
       "      <th>abstract</th>\n",
       "      <th>title_length</th>\n",
       "      <th>abstract_length</th>\n",
       "      <th>cluster</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>58805</td>\n",
       "      <td>Advances in Asynchronous Parallel and Distribu...</td>\n",
       "      <td>Motivated by large-scale optimization proble...</td>\n",
       "      <td>62</td>\n",
       "      <td>1134</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>58806</td>\n",
       "      <td>Turbocharging Treewidth-Bounded Bayesian Netwo...</td>\n",
       "      <td>We present a new approach for learning the s...</td>\n",
       "      <td>67</td>\n",
       "      <td>558</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>58807</td>\n",
       "      <td>Crop Yield Prediction Integrating Genotype and...</td>\n",
       "      <td>Accurate prediction of crop yield supported ...</td>\n",
       "      <td>86</td>\n",
       "      <td>1855</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>58808</td>\n",
       "      <td>Time Series Analysis and Forecasting of COVID-...</td>\n",
       "      <td>Coronavirus disease 2019 (COVID-19) is a glo...</td>\n",
       "      <td>84</td>\n",
       "      <td>1650</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>58809</td>\n",
       "      <td>Movement Tracking by Optical Flow Assisted Ine...</td>\n",
       "      <td>Robust and accurate six degree-of-freedom tr...</td>\n",
       "      <td>62</td>\n",
       "      <td>1021</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>58810</td>\n",
       "      <td>AReLU: Attention-based Rectified Linear Unit</td>\n",
       "      <td>Element-wise activation functions play a cri...</td>\n",
       "      <td>44</td>\n",
       "      <td>1600</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>58811</td>\n",
       "      <td>Feedback Graph Attention Convolutional Network...</td>\n",
       "      <td>Artifacts, blur and noise are the common dis...</td>\n",
       "      <td>78</td>\n",
       "      <td>1560</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>58812</td>\n",
       "      <td>Minimal Variance Sampling with Provable Guaran...</td>\n",
       "      <td>Sampling methods (e.g., node-wise, layer-wis...</td>\n",
       "      <td>95</td>\n",
       "      <td>1335</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>58813</td>\n",
       "      <td>COVIDLite: A depth-wise separable deep neural ...</td>\n",
       "      <td>Background and Objective:Currently, the whol...</td>\n",
       "      <td>110</td>\n",
       "      <td>1823</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "      <td>58814</td>\n",
       "      <td>Effective Elastic Scaling of Deep Learning Wor...</td>\n",
       "      <td>The increased use of deep learning (DL) in a...</td>\n",
       "      <td>52</td>\n",
       "      <td>1548</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   cluster     id                                              title  \\\n",
       "0        0  58805  Advances in Asynchronous Parallel and Distribu...   \n",
       "1        0  58806  Turbocharging Treewidth-Bounded Bayesian Netwo...   \n",
       "2        0  58807  Crop Yield Prediction Integrating Genotype and...   \n",
       "3        0  58808  Time Series Analysis and Forecasting of COVID-...   \n",
       "4        0  58809  Movement Tracking by Optical Flow Assisted Ine...   \n",
       "5        0  58810       AReLU: Attention-based Rectified Linear Unit   \n",
       "6        0  58811  Feedback Graph Attention Convolutional Network...   \n",
       "7        0  58812  Minimal Variance Sampling with Provable Guaran...   \n",
       "8        0  58813  COVIDLite: A depth-wise separable deep neural ...   \n",
       "9        0  58814  Effective Elastic Scaling of Deep Learning Wor...   \n",
       "\n",
       "                                            abstract  title_length  \\\n",
       "0    Motivated by large-scale optimization proble...            62   \n",
       "1    We present a new approach for learning the s...            67   \n",
       "2    Accurate prediction of crop yield supported ...            86   \n",
       "3    Coronavirus disease 2019 (COVID-19) is a glo...            84   \n",
       "4    Robust and accurate six degree-of-freedom tr...            62   \n",
       "5    Element-wise activation functions play a cri...            44   \n",
       "6    Artifacts, blur and noise are the common dis...            78   \n",
       "7    Sampling methods (e.g., node-wise, layer-wis...            95   \n",
       "8    Background and Objective:Currently, the whol...           110   \n",
       "9    The increased use of deep learning (DL) in a...            52   \n",
       "\n",
       "   abstract_length  cluster  \n",
       "0             1134        0  \n",
       "1              558        4  \n",
       "2             1855        4  \n",
       "3             1650        4  \n",
       "4             1021        4  \n",
       "5             1600        4  \n",
       "6             1560        1  \n",
       "7             1335        1  \n",
       "8             1823        4  \n",
       "9             1548        4  "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Melakukan analisis lebih lanjut untuk menggali hubungan antara kata kunci dan artikel yang relevan\n",
    "# Saya akan mencari artikel yang mengandung kata kunci teratas dari setiap cluster dan menampilkannya\n",
    "\n",
    "# Membuat dataframe untuk menyimpan artikel yang relevan berdasarkan kata kunci\n",
    "relevant_articles = {}\n",
    "\n",
    "for cluster, keywords in cluster_keywords.items():\n",
    "    # Mencari artikel yang mengandung kata kunci\n",
    "    relevant_articles[cluster] = df[df['title'].str.contains('|'.join(keywords), case=False) | df['abstract'].str.contains('|'.join(keywords), case=False)]\n",
    "\n",
    "# Menggabungkan hasil menjadi satu dataframe untuk ditampilkan\n",
    "relevant_articles_df = pd.concat(relevant_articles.values(), keys=relevant_articles.keys())\n",
    "\n",
    "# Menampilkan beberapa artikel relevan dari setiap cluster\n",
    "relevant_articles_df = relevant_articles_df.reset_index(level=0).rename(columns={'level_0': 'cluster'})\n",
    "\n",
    "# Menampilkan hasil\n",
    "relevant_articles_df.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01b83331",
   "metadata": {
    "papermill": {
     "duration": 0.006862,
     "end_time": "2025-01-29T09:54:51.187437",
     "exception": false,
     "start_time": "2025-01-29T09:54:51.180575",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Dari hasil ini, kita dapat melihat bahwa setiap cluster memiliki artikel yang berkaitan dengan tema yang diidentifikasi sebelumnya."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "69a5fdca",
   "metadata": {
    "papermill": {
     "duration": 0.006818,
     "end_time": "2025-01-29T09:54:51.201382",
     "exception": false,
     "start_time": "2025-01-29T09:54:51.194564",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "bc74c4b1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:54:51.215954Z",
     "iopub.status.busy": "2025-01-29T09:54:51.215707Z",
     "iopub.status.idle": "2025-01-29T09:55:19.653577Z",
     "shell.execute_reply": "2025-01-29T09:55:19.652845Z"
    },
    "papermill": {
     "duration": 28.447046,
     "end_time": "2025-01-29T09:55:19.655194",
     "exception": false,
     "start_time": "2025-01-29T09:54:51.208148",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import re\n",
    "from sklearn.feature_extraction.text import ENGLISH_STOP_WORDS\n",
    "from datasets import Dataset, DatasetDict\n",
    "from transformers import AutoTokenizer, T5Tokenizer, T5ForConditionalGeneration, Trainer, TrainingArguments\n",
    "import torch\n",
    "\n",
    "# Fungsi untuk membersihkan teks\n",
    "def clean_text(text):\n",
    "    # Menghapus karakter non-alfabet, angka, dan tanda baca\n",
    "    text = re.sub(r'[^a-zA-Z\\s]', '', text)\n",
    "    \n",
    "    # Mengonversi ke huruf kecil\n",
    "    text = text.lower()\n",
    "    \n",
    "    # Menghilangkan stopwords\n",
    "    text = ' '.join([word for word in text.split() if word not in ENGLISH_STOP_WORDS])\n",
    "    \n",
    "    # Menghapus spasi berlebih\n",
    "    text = re.sub(r'\\s+', ' ', text).strip()\n",
    "    \n",
    "    return text\n",
    "\n",
    "# Membersihkan judul dan abstrak\n",
    "df['cleaned_title'] = df['title'].apply(clean_text)\n",
    "df['cleaned_abstract'] = df['abstract'].apply(clean_text)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "795eb52f",
   "metadata": {
    "papermill": {
     "duration": 0.006761,
     "end_time": "2025-01-29T09:55:19.669562",
     "exception": false,
     "start_time": "2025-01-29T09:55:19.662801",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Selanjutnya, saya akan melanjutkan dengan proses tokenisasi untuk menyiapkan data ini agar dapat digunakan dalam model Question Answering. Mari kita lakukan tokenisasi pada judul dan abstrak yang telah dibersihkan."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b96ec3cb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:55:19.684436Z",
     "iopub.status.busy": "2025-01-29T09:55:19.683849Z",
     "iopub.status.idle": "2025-01-29T09:55:20.174667Z",
     "shell.execute_reply": "2025-01-29T09:55:20.173760Z"
    },
    "papermill": {
     "duration": 0.499593,
     "end_time": "2025-01-29T09:55:20.176038",
     "exception": false,
     "start_time": "2025-01-29T09:55:19.676445",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set size: 47020\n",
      "Validation set size: 11755\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Membagi data menjadi train dan eval\n",
    "train_df, eval_df = train_test_split(df, test_size=0.2, random_state=42)\n",
    "\n",
    "# Konversi menjadi format Dataset Hugging Face\n",
    "train_dataset = Dataset.from_pandas(train_df[['cleaned_title', 'cleaned_abstract']])\n",
    "eval_dataset = Dataset.from_pandas(eval_df[['cleaned_title', 'cleaned_abstract']])\n",
    "\n",
    "# Buat DatasetDict\n",
    "dataset = DatasetDict({\n",
    "    'train': train_dataset,\n",
    "    'eval': eval_dataset\n",
    "})\n",
    "\n",
    "# Display the sizes of the training and validation sets\n",
    "print(f'Training set size: {len(train_dataset)}')\n",
    "print(f'Validation set size: {len(eval_dataset)}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3bbb4713",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:55:20.191493Z",
     "iopub.status.busy": "2025-01-29T09:55:20.191209Z",
     "iopub.status.idle": "2025-01-29T09:55:59.390168Z",
     "shell.execute_reply": "2025-01-29T09:55:59.389260Z"
    },
    "papermill": {
     "duration": 39.207988,
     "end_time": "2025-01-29T09:55:59.391581",
     "exception": false,
     "start_time": "2025-01-29T09:55:20.183593",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "efd52191a6ce467dbde8d0a5dcab4df6",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer_config.json:   0%|          | 0.00/2.32k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b8fba26d732c44f385cbd42d9fe6368e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "spiece.model:   0%|          | 0.00/792k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "8ddbe8488aed4abbac6b9f158231c810",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "tokenizer.json:   0%|          | 0.00/1.39M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "49490c9a86b84fc0ae35d71e3f4c2241",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map:   0%|          | 0/47020 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "5620b88e11674369b379b2a30024d869",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Map:   0%|          | 0/11755 [00:00<?, ? examples/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from transformers import AutoTokenizer\n",
    "\n",
    "# Initialize T5 tokenizer and DPR tokenizers\n",
    "t5_tokenizer = AutoTokenizer.from_pretrained('t5-small')\n",
    "\n",
    "# Function to tokenize text for T5\n",
    "def tokenize_t5(examples):\n",
    "    # Tokenize the question (input)\n",
    "    model_inputs = t5_tokenizer(\n",
    "        examples['cleaned_title'],\n",
    "        padding='max_length',  # Pad sequences to max length\n",
    "        truncation=True,       # Truncate sequences longer than max_length\n",
    "        max_length=512,        # Max length for the tokenized text\n",
    "        return_tensors='pt'    # Return PyTorch tensors\n",
    "    )\n",
    "    \n",
    "    # Tokenize the answer (label)\n",
    "    labels = t5_tokenizer(\n",
    "        examples['cleaned_abstract'],\n",
    "        padding='max_length',  # Pad sequences to max length\n",
    "        truncation=True,       # Truncate sequences longer than max_length\n",
    "        max_length=512,        # Max length for the tokenized text\n",
    "        return_tensors='pt'    # Return PyTorch tensors\n",
    "    )\n",
    "\n",
    "    # Add the labels to model_inputs dictionary\n",
    "    model_inputs['labels'] = labels['input_ids']\n",
    "    \n",
    "    return model_inputs\n",
    "\n",
    "\n",
    "# Tokenisasi dataset\n",
    "tokenized_t5_datasets = dataset.map(tokenize_t5, batched=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "cc05a66b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:55:59.407802Z",
     "iopub.status.busy": "2025-01-29T09:55:59.407551Z",
     "iopub.status.idle": "2025-01-29T09:56:01.009683Z",
     "shell.execute_reply": "2025-01-29T09:56:01.008845Z"
    },
    "papermill": {
     "duration": 1.611434,
     "end_time": "2025-01-29T09:56:01.010954",
     "exception": false,
     "start_time": "2025-01-29T09:55:59.399520",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "f2d40f1e5b7d4dc8b8e15df872d6513e",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "config.json:   0%|          | 0.00/1.21k [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "dd265eea3ee14c67ade02bc93893a21d",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "model.safetensors:   0%|          | 0.00/242M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "c6aef991cead4654ad1f3fc0e5d7fb87",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "generation_config.json:   0%|          | 0.00/147 [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Load T5 model for text generation\n",
    "model_t5 = T5ForConditionalGeneration.from_pretrained('t5-small')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "4e8d1801",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:56:01.027749Z",
     "iopub.status.busy": "2025-01-29T09:56:01.027509Z",
     "iopub.status.idle": "2025-01-29T09:56:03.488831Z",
     "shell.execute_reply": "2025-01-29T09:56:03.488083Z"
    },
    "papermill": {
     "duration": 2.470842,
     "end_time": "2025-01-29T09:56:03.490014",
     "exception": false,
     "start_time": "2025-01-29T09:56:01.019172",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: Using wandb-core as the SDK backend.  Please refer to https://wandb.me/wandb-core for more information.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Currently logged in as: \u001b[33mrhendygio19\u001b[0m (\u001b[33mrhendygio19-brawijaya-university\u001b[0m). Use \u001b[1m`wandb login --relogin`\u001b[0m to force relogin\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m If you're specifying your api key in code, ensure this code is not shared publicly.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m Consider setting the WANDB_API_KEY environment variable, or running `wandb login` from the command line.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Appending key for api.wandb.ai to your netrc file: /root/.netrc\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from kaggle_secrets import UserSecretsClient\n",
    "import wandb\n",
    "\n",
    "# Ambil API key dari Kaggle Secrets\n",
    "user_secrets = UserSecretsClient()\n",
    "wandb_api_key = user_secrets.get_secret(\"WANDB_API_KEY\")\n",
    "\n",
    "# Login ke wandb\n",
    "wandb.login(key=wandb_api_key)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "30102fc6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T09:56:03.507387Z",
     "iopub.status.busy": "2025-01-29T09:56:03.507110Z",
     "iopub.status.idle": "2025-01-29T12:10:22.637071Z",
     "shell.execute_reply": "2025-01-29T12:10:22.636190Z"
    },
    "papermill": {
     "duration": 8059.139782,
     "end_time": "2025-01-29T12:10:22.638366",
     "exception": false,
     "start_time": "2025-01-29T09:56:03.498584",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[34m\u001b[1mwandb\u001b[0m: \u001b[33mWARNING\u001b[0m The `run_name` is currently set to the same value as `TrainingArguments.output_dir`. If this was not intended, please specify a different run name by setting the `TrainingArguments.run_name` parameter.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Tracking run with wandb version 0.19.1\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run data is saved locally in \u001b[35m\u001b[1m/kaggle/working/wandb/run-20250129_095604-57qmehog\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Run \u001b[1m`wandb offline`\u001b[0m to turn off syncing.\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: Syncing run \u001b[33m./results\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: ⭐️ View project at \u001b[34m\u001b[4mhttps://wandb.ai/rhendygio19-brawijaya-university/huggingface\u001b[0m\n",
      "\u001b[34m\u001b[1mwandb\u001b[0m: 🚀 View run at \u001b[34m\u001b[4mhttps://wandb.ai/rhendygio19-brawijaya-university/huggingface/runs/57qmehog\u001b[0m\n",
      "Passing a tuple of `past_key_values` is deprecated and will be removed in Transformers v4.48.0. You should pass an instance of `EncoderDecoderCache` instead, e.g. `past_key_values=EncoderDecoderCache.from_legacy_cache(past_key_values)`.\n",
      "Passing a tuple of `past_key_values` is deprecated and will be removed in Transformers v4.48.0. You should pass an instance of `EncoderDecoderCache` instead, e.g. `past_key_values=EncoderDecoderCache.from_legacy_cache(past_key_values)`.\n",
      "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='8817' max='8817' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [8817/8817 2:14:14, Epoch 3/3]\n",
       "    </div>\n",
       "    <table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       " <tr style=\"text-align: left;\">\n",
       "      <th>Epoch</th>\n",
       "      <th>Training Loss</th>\n",
       "      <th>Validation Loss</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1.641800</td>\n",
       "      <td>1.562454</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1.618600</td>\n",
       "      <td>1.531428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1.646400</td>\n",
       "      <td>1.523367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table><p>"
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n",
      "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n",
      "There were missing keys in the checkpoint model loaded: ['encoder.embed_tokens.weight', 'decoder.embed_tokens.weight', 'lm_head.weight'].\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "TrainOutput(global_step=8817, training_loss=1.6944105671392327, metrics={'train_runtime': 8058.1506, 'train_samples_per_second': 17.505, 'train_steps_per_second': 1.094, 'total_flos': 1.909131451564032e+16, 'train_loss': 1.6944105671392327, 'epoch': 3.0})"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Define the training arguments\n",
    "training_args = TrainingArguments(\n",
    "    output_dir='./results',              # Direktori untuk menyimpan model yang dilatih\n",
    "    eval_strategy=\"epoch\",         # Evaluasi setiap epoch\n",
    "    save_strategy=\"epoch\",               # Menyimpan model setiap epoch\n",
    "    learning_rate=2e-5,                  # Learning rate yang digunakan\n",
    "    per_device_train_batch_size=8,       # Ukuran batch untuk pelatihan\n",
    "    per_device_eval_batch_size=8,        # Ukuran batch untuk evaluasi\n",
    "    num_train_epochs=3,                  # Jumlah epoch pelatihan\n",
    "    weight_decay=0.01,                   # Regularisasi untuk mencegah overfitting\n",
    "    logging_dir='./logs',                # Direktori untuk menyimpan log pelatihan\n",
    "    logging_steps=10,                    # Setiap berapa langkah untuk mencatat log\n",
    "    load_best_model_at_end=True,         # Memuat model terbaik di akhir pelatihan\n",
    ")\n",
    "\n",
    "# Menyiapkan Trainer\n",
    "trainer_t5 = Trainer(\n",
    "    model=model_t5,                                # Model yang akan dilatih\n",
    "    args=training_args,                            # Parameter pelatihan\n",
    "    train_dataset=tokenized_t5_datasets['train'],  # Dataset pelatihan\n",
    "    eval_dataset=tokenized_t5_datasets['eval'],    # Dataset evaluasi\n",
    ")\n",
    "\n",
    "# Mulai pelatihan\n",
    "trainer_t5.train()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bd1a2ef5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T12:10:22.658048Z",
     "iopub.status.busy": "2025-01-29T12:10:22.657792Z",
     "iopub.status.idle": "2025-01-29T12:14:39.501159Z",
     "shell.execute_reply": "2025-01-29T12:14:39.500300Z"
    },
    "papermill": {
     "duration": 256.854648,
     "end_time": "2025-01-29T12:14:39.502603",
     "exception": false,
     "start_time": "2025-01-29T12:10:22.647955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/_functions.py:71: UserWarning: Was asked to gather along dimension 0, but all input tensors were scalars; will instead unsqueeze and return a vector.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "    <div>\n",
       "      \n",
       "      <progress value='735' max='735' style='width:300px; height:20px; vertical-align: middle;'></progress>\n",
       "      [735/735 04:16]\n",
       "    </div>\n",
       "    "
      ],
      "text/plain": [
       "<IPython.core.display.HTML object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{'eval_loss': 1.5233666896820068,\n",
       " 'eval_runtime': 256.8338,\n",
       " 'eval_samples_per_second': 45.769,\n",
       " 'eval_steps_per_second': 2.862,\n",
       " 'epoch': 3.0}"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Evaluasi model\n",
    "trainer_t5.evaluate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "8364987f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T12:14:39.523002Z",
     "iopub.status.busy": "2025-01-29T12:14:39.522756Z",
     "iopub.status.idle": "2025-01-29T12:14:40.091678Z",
     "shell.execute_reply": "2025-01-29T12:14:40.090751Z"
    },
    "papermill": {
     "duration": 0.580715,
     "end_time": "2025-01-29T12:14:40.093187",
     "exception": false,
     "start_time": "2025-01-29T12:14:39.512472",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model saved to ./saved_model\n"
     ]
    }
   ],
   "source": [
    "import torch\n",
    "\n",
    "# Simpan model ke folder 'saved_model'\n",
    "model_save_path = \"./saved_model\"\n",
    "model_t5.save_pretrained(model_save_path)\n",
    "t5_tokenizer.save_pretrained(model_save_path)  \n",
    "\n",
    "print(f\"Model saved to {model_save_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "cd58ac8c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T12:14:40.113071Z",
     "iopub.status.busy": "2025-01-29T12:14:40.112823Z",
     "iopub.status.idle": "2025-01-29T12:14:40.316213Z",
     "shell.execute_reply": "2025-01-29T12:14:40.315349Z"
    },
    "papermill": {
     "duration": 0.214912,
     "end_time": "2025-01-29T12:14:40.317946",
     "exception": false,
     "start_time": "2025-01-29T12:14:40.103034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "cp: './saved_model' and '/kaggle/working/saved_model' are the same file\r\n"
     ]
    }
   ],
   "source": [
    "!cp -r ./saved_model /kaggle/working/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "7b82d16e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T12:14:40.338027Z",
     "iopub.status.busy": "2025-01-29T12:14:40.337772Z",
     "iopub.status.idle": "2025-01-29T12:14:54.377695Z",
     "shell.execute_reply": "2025-01-29T12:14:54.376707Z"
    },
    "papermill": {
     "duration": 14.051184,
     "end_time": "2025-01-29T12:14:54.378981",
     "exception": false,
     "start_time": "2025-01-29T12:14:40.327797",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  adding: saved_model/ (stored 0%)\r\n",
      "  adding: saved_model/generation_config.json (deflated 29%)\r\n",
      "  adding: saved_model/config.json (deflated 62%)\r\n",
      "  adding: saved_model/spiece.model (deflated 48%)\r\n",
      "  adding: saved_model/special_tokens_map.json (deflated 85%)\r\n",
      "  adding: saved_model/model.safetensors (deflated 9%)\r\n",
      "  adding: saved_model/tokenizer_config.json (deflated 95%)\r\n",
      "  adding: saved_model/tokenizer.json (deflated 74%)\r\n"
     ]
    }
   ],
   "source": [
    "!zip -r saved_model.zip ./saved_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "658c280f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-01-29T12:14:54.399584Z",
     "iopub.status.busy": "2025-01-29T12:14:54.399310Z",
     "iopub.status.idle": "2025-01-29T12:14:55.550839Z",
     "shell.execute_reply": "2025-01-29T12:14:55.549938Z"
    },
    "papermill": {
     "duration": 1.163387,
     "end_time": "2025-01-29T12:14:55.552396",
     "exception": false,
     "start_time": "2025-01-29T12:14:54.389009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Traceback (most recent call last):\r\n",
      "  File \"/usr/local/bin/kaggle\", line 5, in <module>\r\n",
      "    from kaggle.cli import main\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/kaggle/__init__.py\", line 7, in <module>\r\n",
      "    api.authenticate()\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/kaggle/api/kaggle_api_extended.py\", line 407, in authenticate\r\n",
      "    raise IOError('Could not find {}. Make sure it\\'s located in'\r\n",
      "OSError: Could not find kaggle.json. Make sure it's located in /root/.config/kaggle. Or use the environment method. See setup instructions at https://github.com/Kaggle/kaggle-api/\r\n",
      "Traceback (most recent call last):\r\n",
      "  File \"/usr/local/bin/kaggle\", line 5, in <module>\r\n",
      "    from kaggle.cli import main\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/kaggle/__init__.py\", line 7, in <module>\r\n",
      "    api.authenticate()\r\n",
      "  File \"/usr/local/lib/python3.10/dist-packages/kaggle/api/kaggle_api_extended.py\", line 407, in authenticate\r\n",
      "    raise IOError('Could not find {}. Make sure it\\'s located in'\r\n",
      "OSError: Could not find kaggle.json. Make sure it's located in /root/.config/kaggle. Or use the environment method. See setup instructions at https://github.com/Kaggle/kaggle-api/\r\n"
     ]
    }
   ],
   "source": [
    "!kaggle datasets init -p ./saved_model\n",
    "!kaggle datasets create -p ./saved_model -u"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "nvidiaTeslaT4",
   "dataSources": [
    {
     "datasetId": 6559847,
     "sourceId": 10598271,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30840,
   "isGpuEnabled": true,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8467.632726,
   "end_time": "2025-01-29T12:14:59.023485",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-01-29T09:53:51.390759",
   "version": "2.6.0"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {
     "000a1d8433b44679ac4c298c5892b513": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "01ed99ecab8d45418f01dcfc07f8b969": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_ff9ada52e2304135ba019074f0ffa3f2",
       "max": 11755.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_58910b687cd04c00984d137b3910680a",
       "tabbable": null,
       "tooltip": null,
       "value": 11755.0
      }
     },
     "059b2bb7ec114a3895a91fc54c17bce7": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "0653e9c790994179b173ce58757c5306": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "06eda76d3f4b4f3099e84d4be53f52e4": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "093e05c802c14a078d7820e59295e7b0": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_1f6e97ea61fa4967bc5f44404b313146",
       "placeholder": "​",
       "style": "IPY_MODEL_19e004dde1e5427d81ebda8ffcdbdb23",
       "tabbable": null,
       "tooltip": null,
       "value": "model.safetensors: 100%"
      }
     },
     "0cc8dc578f894a45bd5a8b36cffbc297": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fe68a5b30d1f46189649a604f6939453",
       "placeholder": "​",
       "style": "IPY_MODEL_16ca379614044047a792f8f218aee55d",
       "tabbable": null,
       "tooltip": null,
       "value": " 47020/47020 [00:30&lt;00:00, 1603.10 examples/s]"
      }
     },
     "1556e70e0a9049d8ba67b9ce7771d9b7": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "16ca379614044047a792f8f218aee55d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "19e004dde1e5427d81ebda8ffcdbdb23": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "1b2dd35a0a3e43f487f0b11a93e8e97e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "1f6e97ea61fa4967bc5f44404b313146": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "22c9e95a06be4d0e8dd3538222c9aa35": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e9106d4e532e4ab5827f289a363cd974",
       "placeholder": "​",
       "style": "IPY_MODEL_bb1daf2e28ce43b480680c852a745e95",
       "tabbable": null,
       "tooltip": null,
       "value": "generation_config.json: 100%"
      }
     },
     "2d6dee73ddbb423a8ca2bffee62838de": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "2e134494e782478f825041f618f3f0c1": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3a35e8cd6fb7422595d2c2aeaf30cc20": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "3a51e6b90f17408097708e23b0588095": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "443e4e1bfa8c4bc681f71ec6ded80058": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "49490c9a86b84fc0ae35d71e3f4c2241": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e6e4a057b5c841e4a8bddd017d588f94",
        "IPY_MODEL_a269d083e70d4746a7b9d0d495bbdfef",
        "IPY_MODEL_0cc8dc578f894a45bd5a8b36cffbc297"
       ],
       "layout": "IPY_MODEL_e7f33e95113b486d930de55b440a6788",
       "tabbable": null,
       "tooltip": null
      }
     },
     "4e898e733c804a87abb6e88e57039e0b": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4f720b9bc40e4d32a99ee124dd3b928d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "4f93a4a18b954a4a938ba11f9ee075ee": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "53bb37b9a29e4e12b56eb663af275dd9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_fc7c1b64083543dbb826c6409720c894",
       "max": 2324.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_d428ef9e7d264800ab1051cdbe92f8ba",
       "tabbable": null,
       "tooltip": null,
       "value": 2324.0
      }
     },
     "541aeac738d24703a36ca30f7009898d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_06eda76d3f4b4f3099e84d4be53f52e4",
       "placeholder": "​",
       "style": "IPY_MODEL_7d67d018ed014802a6f2d6436b5c7d79",
       "tabbable": null,
       "tooltip": null,
       "value": " 792k/792k [00:00&lt;00:00, 12.1MB/s]"
      }
     },
     "5620b88e11674369b379b2a30024d869": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_e188a362e953483e8c54d135eb826395",
        "IPY_MODEL_01ed99ecab8d45418f01dcfc07f8b969",
        "IPY_MODEL_647f0391b90b4b0cac847333141c3f03"
       ],
       "layout": "IPY_MODEL_f0a1cf5741814f929d65b22345afb0f9",
       "tabbable": null,
       "tooltip": null
      }
     },
     "58910b687cd04c00984d137b3910680a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "5ace302472444d6399a9e53749f2ef0a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "5c7bac5e055449bd93e66791e2722c1a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "5d77995838e74ad39a58270c775031f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4e898e733c804a87abb6e88e57039e0b",
       "placeholder": "​",
       "style": "IPY_MODEL_443e4e1bfa8c4bc681f71ec6ded80058",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer_config.json: 100%"
      }
     },
     "647f0391b90b4b0cac847333141c3f03": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_93c2ca1c4d2a4f4fbdb31184d44bb99c",
       "placeholder": "​",
       "style": "IPY_MODEL_93b2ab86c90140569b62c9f1fd432a12",
       "tabbable": null,
       "tooltip": null,
       "value": " 11755/11755 [00:07&lt;00:00, 1538.98 examples/s]"
      }
     },
     "64882f5211e04260b5113b0f2ad1d3b3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "6a92b6f48fc14031b0ec333eaadf3d0f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "6cf5faf09791422e8d69e09d0ca1f213": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f3b6e2fb36cf48ef9240f2d471c0b19c",
       "max": 1389353.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_e5137e4d7a9549489de2e606e5310f6a",
       "tabbable": null,
       "tooltip": null,
       "value": 1389353.0
      }
     },
     "6e35575c35124ffd9fb4ffe9c6806761": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "733ad4cf9656418483a35d99a500e350": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "742061406c1149d6bfc3df5cc1803e2c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cd74a919f6b24d2188fe5e1dd1a1007f",
       "placeholder": "​",
       "style": "IPY_MODEL_9c5641fe9251441cbabdf1034349447d",
       "tabbable": null,
       "tooltip": null,
       "value": "config.json: 100%"
      }
     },
     "761cd16a8ab94ed4b3248d94e7238d7f": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "7b9043309f6f45e99f8be72c5f7e1127": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f5d3169bdbd34dda9538284e7e8efeab",
       "max": 1206.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_1b2dd35a0a3e43f487f0b11a93e8e97e",
       "tabbable": null,
       "tooltip": null,
       "value": 1206.0
      }
     },
     "7d67d018ed014802a6f2d6436b5c7d79": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "8b0ea5485640469aba2376ea31b2b326": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "8d76a095c78340dab76cf3e97ce191ed": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "8ddbe8488aed4abbac6b9f158231c810": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_ec7d5fb72561408891873a2cb5e212f9",
        "IPY_MODEL_6cf5faf09791422e8d69e09d0ca1f213",
        "IPY_MODEL_d471e0b71cf64f5d8e4a20d511fba545"
       ],
       "layout": "IPY_MODEL_3a51e6b90f17408097708e23b0588095",
       "tabbable": null,
       "tooltip": null
      }
     },
     "93b2ab86c90140569b62c9f1fd432a12": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "93c2ca1c4d2a4f4fbdb31184d44bb99c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "93fd4211c6734f8ba80255ad63c79735": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9858cecba457454f9cf8a032638fab14": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "99dc9e82d6564afcad04a1eea88bb23b": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_9858cecba457454f9cf8a032638fab14",
       "placeholder": "​",
       "style": "IPY_MODEL_93fd4211c6734f8ba80255ad63c79735",
       "tabbable": null,
       "tooltip": null,
       "value": " 147/147 [00:00&lt;00:00, 16.3kB/s]"
      }
     },
     "9afc605ae2c94609b1679972f0c283b2": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_8b0ea5485640469aba2376ea31b2b326",
       "max": 791656.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_8d76a095c78340dab76cf3e97ce191ed",
       "tabbable": null,
       "tooltip": null,
       "value": 791656.0
      }
     },
     "9c5641fe9251441cbabdf1034349447d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "9fa9f25284744e7aa1a995ab18ea20f8": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_bb3a5bdd2eef4757bb9a7c0c069510bc",
       "max": 147.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_a464b0adb22c4a34a8dd46fec69c9ebd",
       "tabbable": null,
       "tooltip": null,
       "value": 147.0
      }
     },
     "a269d083e70d4746a7b9d0d495bbdfef": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_6e35575c35124ffd9fb4ffe9c6806761",
       "max": 47020.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_733ad4cf9656418483a35d99a500e350",
       "tabbable": null,
       "tooltip": null,
       "value": 47020.0
      }
     },
     "a464b0adb22c4a34a8dd46fec69c9ebd": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ad09722c18a34c21b963b7259173d71e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "ad63cfd6dddb4156b89f91431f223445": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_3a35e8cd6fb7422595d2c2aeaf30cc20",
       "placeholder": "​",
       "style": "IPY_MODEL_c995d76989d747c5ac758dff1216cc28",
       "tabbable": null,
       "tooltip": null,
       "value": " 242M/242M [00:00&lt;00:00, 271MB/s]"
      }
     },
     "b2851a803b244bf6b96ab1db0771499c": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4f720b9bc40e4d32a99ee124dd3b928d",
       "placeholder": "​",
       "style": "IPY_MODEL_2d6dee73ddbb423a8ca2bffee62838de",
       "tabbable": null,
       "tooltip": null,
       "value": " 2.32k/2.32k [00:00&lt;00:00, 227kB/s]"
      }
     },
     "b5851d62515a4a658c52a6e857e4751c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "b8fba26d732c44f385cbd42d9fe6368e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_db5241b2f9b343148b4569bfd5785ade",
        "IPY_MODEL_9afc605ae2c94609b1679972f0c283b2",
        "IPY_MODEL_541aeac738d24703a36ca30f7009898d"
       ],
       "layout": "IPY_MODEL_d731c039bc7046f0bc5173412ec2b52e",
       "tabbable": null,
       "tooltip": null
      }
     },
     "bb1daf2e28ce43b480680c852a745e95": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "bb3a5bdd2eef4757bb9a7c0c069510bc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "c6aef991cead4654ad1f3fc0e5d7fb87": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_22c9e95a06be4d0e8dd3538222c9aa35",
        "IPY_MODEL_9fa9f25284744e7aa1a995ab18ea20f8",
        "IPY_MODEL_99dc9e82d6564afcad04a1eea88bb23b"
       ],
       "layout": "IPY_MODEL_b5851d62515a4a658c52a6e857e4751c",
       "tabbable": null,
       "tooltip": null
      }
     },
     "c995d76989d747c5ac758dff1216cc28": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cae2e4c6b18342b0ab6e93193c0c996d": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cba29090072b4c73a4e7a0131d7d4eff": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "background": null,
       "description_width": "",
       "font_size": null,
       "text_color": null
      }
     },
     "cd74a919f6b24d2188fe5e1dd1a1007f": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "cf80fe7d29f3468fa22eb3f60f0e82d3": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "FloatProgressModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "FloatProgressModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "ProgressView",
       "bar_style": "success",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e61123c1c2ec4b38a1761490aa1be5b6",
       "max": 242043056.0,
       "min": 0.0,
       "orientation": "horizontal",
       "style": "IPY_MODEL_ad09722c18a34c21b963b7259173d71e",
       "tabbable": null,
       "tooltip": null,
       "value": 242043056.0
      }
     },
     "d428ef9e7d264800ab1051cdbe92f8ba": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "d471e0b71cf64f5d8e4a20d511fba545": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_e26ca90c4ccc437685260d7e85808cfc",
       "placeholder": "​",
       "style": "IPY_MODEL_64882f5211e04260b5113b0f2ad1d3b3",
       "tabbable": null,
       "tooltip": null,
       "value": " 1.39M/1.39M [00:00&lt;00:00, 23.7MB/s]"
      }
     },
     "d731c039bc7046f0bc5173412ec2b52e": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "db5241b2f9b343148b4569bfd5785ade": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_f757d5aaedff4044b3c50363c302779a",
       "placeholder": "​",
       "style": "IPY_MODEL_cba29090072b4c73a4e7a0131d7d4eff",
       "tabbable": null,
       "tooltip": null,
       "value": "spiece.model: 100%"
      }
     },
     "dd265eea3ee14c67ade02bc93893a21d": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_093e05c802c14a078d7820e59295e7b0",
        "IPY_MODEL_cf80fe7d29f3468fa22eb3f60f0e82d3",
        "IPY_MODEL_ad63cfd6dddb4156b89f91431f223445"
       ],
       "layout": "IPY_MODEL_5c7bac5e055449bd93e66791e2722c1a",
       "tabbable": null,
       "tooltip": null
      }
     },
     "e188a362e953483e8c54d135eb826395": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_059b2bb7ec114a3895a91fc54c17bce7",
       "placeholder": "​",
       "style": "IPY_MODEL_0653e9c790994179b173ce58757c5306",
       "tabbable": null,
       "tooltip": null,
       "value": "Map: 100%"
      }
     },
     "e26ca90c4ccc437685260d7e85808cfc": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e5137e4d7a9549489de2e606e5310f6a": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "ProgressStyleModel",
      "state": {
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "ProgressStyleModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "StyleView",
       "bar_color": null,
       "description_width": ""
      }
     },
     "e61123c1c2ec4b38a1761490aa1be5b6": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e6e4a057b5c841e4a8bddd017d588f94": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_cae2e4c6b18342b0ab6e93193c0c996d",
       "placeholder": "​",
       "style": "IPY_MODEL_761cd16a8ab94ed4b3248d94e7238d7f",
       "tabbable": null,
       "tooltip": null,
       "value": "Map: 100%"
      }
     },
     "e7f33e95113b486d930de55b440a6788": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "e9106d4e532e4ab5827f289a363cd974": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ec7d5fb72561408891873a2cb5e212f9": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_4f93a4a18b954a4a938ba11f9ee075ee",
       "placeholder": "​",
       "style": "IPY_MODEL_5ace302472444d6399a9e53749f2ef0a",
       "tabbable": null,
       "tooltip": null,
       "value": "tokenizer.json: 100%"
      }
     },
     "efd52191a6ce467dbde8d0a5dcab4df6": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_5d77995838e74ad39a58270c775031f9",
        "IPY_MODEL_53bb37b9a29e4e12b56eb663af275dd9",
        "IPY_MODEL_b2851a803b244bf6b96ab1db0771499c"
       ],
       "layout": "IPY_MODEL_6a92b6f48fc14031b0ec333eaadf3d0f",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f07e276008fc4fdbb55b07fb5edab4d5": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HTMLModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HTMLModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HTMLView",
       "description": "",
       "description_allow_html": false,
       "layout": "IPY_MODEL_2e134494e782478f825041f618f3f0c1",
       "placeholder": "​",
       "style": "IPY_MODEL_1556e70e0a9049d8ba67b9ce7771d9b7",
       "tabbable": null,
       "tooltip": null,
       "value": " 1.21k/1.21k [00:00&lt;00:00, 125kB/s]"
      }
     },
     "f0a1cf5741814f929d65b22345afb0f9": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f2d40f1e5b7d4dc8b8e15df872d6513e": {
      "model_module": "@jupyter-widgets/controls",
      "model_module_version": "2.0.0",
      "model_name": "HBoxModel",
      "state": {
       "_dom_classes": [],
       "_model_module": "@jupyter-widgets/controls",
       "_model_module_version": "2.0.0",
       "_model_name": "HBoxModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/controls",
       "_view_module_version": "2.0.0",
       "_view_name": "HBoxView",
       "box_style": "",
       "children": [
        "IPY_MODEL_742061406c1149d6bfc3df5cc1803e2c",
        "IPY_MODEL_7b9043309f6f45e99f8be72c5f7e1127",
        "IPY_MODEL_f07e276008fc4fdbb55b07fb5edab4d5"
       ],
       "layout": "IPY_MODEL_000a1d8433b44679ac4c298c5892b513",
       "tabbable": null,
       "tooltip": null
      }
     },
     "f3b6e2fb36cf48ef9240f2d471c0b19c": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f5d3169bdbd34dda9538284e7e8efeab": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "f757d5aaedff4044b3c50363c302779a": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fc7c1b64083543dbb826c6409720c894": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "fe68a5b30d1f46189649a604f6939453": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     },
     "ff9ada52e2304135ba019074f0ffa3f2": {
      "model_module": "@jupyter-widgets/base",
      "model_module_version": "2.0.0",
      "model_name": "LayoutModel",
      "state": {
       "_model_module": "@jupyter-widgets/base",
       "_model_module_version": "2.0.0",
       "_model_name": "LayoutModel",
       "_view_count": null,
       "_view_module": "@jupyter-widgets/base",
       "_view_module_version": "2.0.0",
       "_view_name": "LayoutView",
       "align_content": null,
       "align_items": null,
       "align_self": null,
       "border_bottom": null,
       "border_left": null,
       "border_right": null,
       "border_top": null,
       "bottom": null,
       "display": null,
       "flex": null,
       "flex_flow": null,
       "grid_area": null,
       "grid_auto_columns": null,
       "grid_auto_flow": null,
       "grid_auto_rows": null,
       "grid_column": null,
       "grid_gap": null,
       "grid_row": null,
       "grid_template_areas": null,
       "grid_template_columns": null,
       "grid_template_rows": null,
       "height": null,
       "justify_content": null,
       "justify_items": null,
       "left": null,
       "margin": null,
       "max_height": null,
       "max_width": null,
       "min_height": null,
       "min_width": null,
       "object_fit": null,
       "object_position": null,
       "order": null,
       "overflow": null,
       "padding": null,
       "right": null,
       "top": null,
       "visibility": null,
       "width": null
      }
     }
    },
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
